% To construct a directed ER Random-Graph Network
% optinal: with a backbone chain
% updated: 14-09-2018

function [A,ak,disc] = ern(N,nlink,str)
% Input:  N - # of nodes
%     nlink - # of links
%       str - {'no_chain'; 'chain'}
% Output: A -
%        ak -average degree
%      disc - (disconnected == 1); (OK == 0)
% --- --- --- --- --- --- --- --- --- --- --- 
% or a P_RG could be generated by N and nlink
%nargin is a built-in MATLAB variable that tells you how many input arguments were passed to the function.
    if nargin<3;  str = 'no_chain';  end
    A = zeros(N,N);
    cnt = 0;  %% link counter
% -----| if a backbone is needed |----- %    
    switch str
        case 'chain'
            %X = diag(v, k)v：向量，用于指定对角线元素。k（可选）：指定对角线位置，默认为0（主对角线）。
            A = diag(ones(1,N-1),1);  %% i -> (i+1)
            A(N,1) = 1;
            cnt = N;
        case 'tree' % ensure connectivity
            for i = 1:N-1
                j = i+randi(N-i);
                A(i,j) = 1;
            end
            A(N,1) = 1;
            cnt = N;
    end
% -----| if a backbone is needed |----- %
    
    while cnt < nlink
        i = randi(N);
        j = randi(N);
        while (j==i) || A(i,j) || A(j,i)
            i = randi(N);
            j = randi(N);
        end
        A(i,j) = 1;  % A(j,i) = -1;
        cnt = cnt+1;
    end
    A=sparse(A)
    if sum(sum(A==1))~=cnt;  error('Link Sum Error ...');  end
    disc = 0;
    % as long as a node has no in-/out-degree
    for i = 1:N
        if all(A(i,:)==0) && all(A(:,i)==0);  disc=1;  break;  end
    end
    ak = cnt/N;
    
end

